{
  "version": 3,
  "sources": ["../src/cookies.js"],
  "sourcesContent": ["/**\n * @Function{setVoteListeners}\n * List over the voting buttons and set listeners to set cookies if a user votes\n * Then the next time they visit the page they cannot recast their vote in the same direction\n */\nconst setVoteListeners = () => {\n\tconst radios = document.querySelectorAll(\"#task-list input[type=radio]\");\n\tfor (let j = 0; j < radios.length; j++) {\n\t\tconst id = radios[j].id;\n\t\tconst voteInfo = id.split(\"-\");\n\t\tradios[j].onclick = function () {\n\t\t\tsetCookie(voteInfo[0], voteInfo[1], 1);\n\t\t};\n\t}\n};\n\n/**\n * @Function{setCookie}\n * record that a user voted on this task by setting a cookie\n * @param{string} taskId - the id of the taskId which is an integer represented as a string\n * @param{string} vote - the direction the user voted, up or down\n * @param{number} exdays - how long the cookie should live in days\n */\nconst setCookie = (taskId, vote, exdays) => {\n\tconst d = new Date();\n\td.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);\n\tconst expires = `Expires=${d.toUTCString()}`;\n    document.cookie = `${taskId}=${vote};${expires};path=/; SameSite=Strict; Secure;`;\n};\n\n/**\n * @Function{getCookie}\n * Check if a cookie exists and if so, return the value of that cookie\n * @param{string} cname - the name of the cookie to look for, likely the ID of the task\n * @returns{string} and empty string if not found or the cookie value if it does\n */\nconst getCookie = (cname) => {\n    const name = `${cname}=`;\n\tconst decodedCookie = decodeURIComponent(document.cookie);\n\tconst ca = decodedCookie.split(\";\");\n\tfor (let i = 0; i < ca.length; i++) {\n\t\tlet c = ca[i];\n\t\twhile (c.charAt(0) === \" \") {\n\t\t\tc = c.substring(1);\n\t\t}\n\t\tif (c.indexOf(name) === 0) {\n\t\t\treturn c.substring(name.length, c.length);\n\t\t}\n\t}\n\treturn \"\";\n};\n\nconst listAllCookieNames = () => {\n\tconst allCookies = document.cookie;\n\tconst cookieArray = allCookies.split(\";\");\n\tconst cookieNames = [];\n\tfor (const cookie of cookieArray) {\n\t\tconst [name, value] = cookie.split(\"=\");\n        cookieNames.push(`${name}-${value}`);\n\t}\n\n\treturn cookieNames;\n};\n\n/**\n * @Fucntion{applyPreviousVotes}\n * Loop through the cookies from this site and mark any votes that have been\n * recorded previous to this visit\n */\nconst applyPreviousVotes = () => {\n    const previousVotes = listAllCookieNames();\n    if (previousVotes.length ===0) {\n        return;\n    }\n\n    for (let v=0; v< previousVotes.length; v++) {\n        const radio = document.getElementById(previousVotes[v]);\n        //Could have a cookie for a task not shown\n        if (radio) {\n            radio.checked = true;\n        }\n    }\n};\n\nsetVoteListeners();\napplyPreviousVotes();\n"],
  "mappings": "MAKA,IAAMA,EAAmB,IAAM,CAC9B,IAAMC,EAAS,SAAS,iBAAiB,8BAA8B,EACvE,QAASC,EAAI,EAAGA,EAAID,EAAO,OAAQC,IAAK,CAEvC,IAAMC,EADKF,EAAOC,CAAC,EAAE,GACD,MAAM,GAAG,EAC7BD,EAAOC,CAAC,EAAE,QAAU,UAAY,CAC/BE,EAAUD,EAAS,CAAC,EAAGA,EAAS,CAAC,EAAG,CAAC,CACtC,CACD,CACD,EASMC,EAAY,CAACC,EAAQC,EAAMC,IAAW,CAC3C,IAAMC,EAAI,IAAI,KACdA,EAAE,QAAQA,EAAE,QAAQ,EAAID,EAAS,GAAK,GAAK,GAAK,GAAI,EACpD,IAAME,EAAU,WAAWD,EAAE,YAAY,CAAC,GACvC,SAAS,OAAS,GAAGH,CAAM,IAAIC,CAAI,IAAIG,CAAO,mCAClD,EAwBA,IAAMC,EAAqB,IAAM,CAEhC,IAAMC,EADa,SAAS,OACG,MAAM,GAAG,EAClCC,EAAc,CAAC,EACrB,QAAWC,KAAUF,EAAa,CACjC,GAAM,CAACG,EAAMC,CAAK,EAAIF,EAAO,MAAM,GAAG,EAChCD,EAAY,KAAK,GAAGE,CAAI,IAAIC,CAAK,EAAE,CAC1C,CAEA,OAAOH,CACR,EAOMI,EAAqB,IAAM,CAC7B,IAAMC,EAAgBP,EAAmB,EACzC,GAAIO,EAAc,SAAU,EAI5B,QAASC,EAAE,EAAGA,EAAGD,EAAc,OAAQC,IAAK,CACxC,IAAMC,EAAQ,SAAS,eAAeF,EAAcC,CAAC,CAAC,EAElDC,IACAA,EAAM,QAAU,GAExB,CACJ,EAEAC,EAAiB,EACjBJ,EAAmB",
  "names": ["setVoteListeners", "radios", "j", "voteInfo", "setCookie", "taskId", "vote", "exdays", "d", "expires", "listAllCookieNames", "cookieArray", "cookieNames", "cookie", "name", "value", "applyPreviousVotes", "previousVotes", "v", "radio", "setVoteListeners"]
}
